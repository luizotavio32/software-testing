"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const NodeMutator_1 = require("./NodeMutator");
class ArrayDeclarationMutator extends NodeMutator_1.default {
    constructor() {
        super(...arguments);
        this.name = 'ArrayDeclaration';
    }
    guard(node) {
        return (node.kind === ts.SyntaxKind.ArrayLiteralExpression || node.kind === ts.SyntaxKind.CallExpression || node.kind === ts.SyntaxKind.NewExpression);
    }
    identifyReplacements(node, sourceFile) {
        if (node.kind === ts.SyntaxKind.ArrayLiteralExpression) {
            if (node.elements.length) {
                return [{ node, replacement: '[]' }];
            }
            else {
                return [{ node, replacement: '["Stryker was here"]' }];
            }
        }
        else if (node.kind === ts.SyntaxKind.CallExpression && node.expression.kind !== ts.SyntaxKind.Identifier) {
            // extra guard in case of a function call expression
            return [];
        }
        else {
            if (node.expression.getFullText(sourceFile).trim() === 'Array') {
                const newPrefix = node.kind === ts.SyntaxKind.NewExpression ? 'new ' : '';
                const mutatedCallArgs = node.arguments && node.arguments.length ? '' : '[]';
                return [{ node, replacement: `${newPrefix}Array(${mutatedCallArgs})` }];
            }
            else {
                return [];
            }
        }
    }
}
exports.default = ArrayDeclarationMutator;
//# sourceMappingURL=ArrayDeclarationMutator.js.map