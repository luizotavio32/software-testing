import { LoggerFactoryMethod } from '@stryker-mutator/api/logging';
import { File } from '@stryker-mutator/api/core';
import * as ts from 'typescript';
export interface EmitOutput {
    singleResult: boolean;
    outputFiles: File[];
}
export default class TranspilingLanguageService {
    private readonly projectDirectory;
    private readonly produceSourceMaps;
    private readonly languageService;
    private readonly logger;
    private readonly compilerOptions;
    private readonly files;
    private readonly diagnosticsFormatter;
    constructor(compilerOptions: Readonly<ts.CompilerOptions>, rootFiles: readonly File[], projectDirectory: string, produceSourceMaps: boolean, getLogger: LoggerFactoryMethod);
    /**
     * Adapts compiler options to emit sourceMap files and disable other options for performance reasons
     *
     * @param source The unchanged compiler options
     */
    private adaptCompilerOptions;
    /**
     * Replaces the content of the given text files
     * @param mutantCandidate The mutant used to replace the original source
     */
    replace(replacements: readonly File[]): void;
    getSemanticDiagnostics(files: readonly File[]): string;
    /**
     * Get the output text file for given source file
     * @param sourceFile Emit output file based on this source file
     * @return  Map<TextFile> Returns a map of source file names with their output files.
     *          If all output files are bundled together, only returns the output file once using the first file as key
     */
    emit(fileName: string): EmitOutput;
    private createLanguageServiceHost;
    private pullFileIntoMemoryIfNeeded;
    private resolveFileName;
}
//# sourceMappingURL=TranspilingLanguageService.d.ts.map