"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHeaderFile = exports.isMapFile = exports.isJavaScriptFile = exports.isTypescriptFile = exports.printNode = exports.guardTypescriptVersion = exports.getProjectDirectory = exports.getTSConfig = exports.normalizeFileFromTypescript = exports.normalizeFileForTypescript = exports.parseFile = void 0;
const os = require("os");
const path = require("path");
const semver = require("semver");
const ts = require("typescript");
function parseFile(file, target) {
    return ts.createSourceFile(file.name, file.textContent, target || ts.ScriptTarget.ES5, /*setParentNodes*/ true);
}
exports.parseFile = parseFile;
/**
 * For some reason, typescript on windows doesn't like back slashes
 * @param fileName The file name to be normalized
 */
function normalizeFileForTypescript(fileName) {
    return fileName.replace(/\\/g, '/');
}
exports.normalizeFileForTypescript = normalizeFileForTypescript;
/**
 * For some reason, typescript on windows doesn't like back slashes
 * @param fileName The file name to be normalized
 */
function normalizeFileFromTypescript(fileName) {
    return path.normalize(fileName);
}
exports.normalizeFileFromTypescript = normalizeFileFromTypescript;
function getTSConfig(options) {
    return options.tsconfig;
}
exports.getTSConfig = getTSConfig;
function getProjectDirectory(options) {
    return path.dirname(options.tsconfigFile || '.');
}
exports.getProjectDirectory = getProjectDirectory;
/**
 * Verifies that the installed version of typescript satisfies '>=2.4` and otherwise: throws an exception
 */
function guardTypescriptVersion() {
    if (!semver.satisfies(ts.version, '>=2.4')) {
        throw new Error(`Installed typescript version ${ts.version} is not supported by stryker-typescript. Please install version 2.5 or higher (\`npm install typescript@^2.5\`).`);
    }
}
exports.guardTypescriptVersion = guardTypescriptVersion;
const printer = ts.createPrinter({
    newLine: os.EOL === '\r\n' ? ts.NewLineKind.CarriageReturnLineFeed : ts.NewLineKind.LineFeed,
    removeComments: false,
});
function printNode(node, originalSourceFile) {
    return printer.printNode(ts.EmitHint.Unspecified, node, originalSourceFile);
}
exports.printNode = printNode;
function tsExtensions() {
    // Since ts 2.5 the ts.Extension enum is a string-based enum
    if (semver.satisfies(ts.version, '>=2.5')) {
        return Object.keys(ts.Extension).map((extension) => ts.Extension[extension]);
    }
    else {
        // We know that pre 2.5 should have these extensions:
        return ['.ts', '.tsx', '.js', '.jsx'];
    }
}
function isTypescriptFile(fileName) {
    return tsExtensions().some((extension) => fileName.endsWith(extension));
}
exports.isTypescriptFile = isTypescriptFile;
function isJavaScriptFile(file) {
    return file.name.endsWith('.js') || file.name.endsWith('.jsx') || file.name.endsWith('.json');
}
exports.isJavaScriptFile = isJavaScriptFile;
function isMapFile(file) {
    return file.name.endsWith('.map');
}
exports.isMapFile = isMapFile;
/**
 * Determines whether or not given file is a typescript header file (*.d.ts)
 */
function isHeaderFile(fileName) {
    return fileName.endsWith('.d.ts');
}
exports.isHeaderFile = isHeaderFile;
//# sourceMappingURL=tsHelpers.js.map