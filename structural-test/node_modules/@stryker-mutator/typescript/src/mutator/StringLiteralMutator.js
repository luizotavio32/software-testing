"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const NodeMutator_1 = require("./NodeMutator");
class StringLiteralMutator extends NodeMutator_1.default {
    constructor() {
        super(...arguments);
        this.name = 'StringLiteral';
    }
    guard(node) {
        switch (node.kind) {
            case ts.SyntaxKind.StringLiteral:
            case ts.SyntaxKind.TemplateExpression:
            case ts.SyntaxKind.FirstTemplateToken:
                return true;
            default:
                return false;
        }
    }
    isInvalidParent(parent) {
        switch (parent.kind) {
            case ts.SyntaxKind.ImportDeclaration:
            case ts.SyntaxKind.ExportDeclaration:
            case ts.SyntaxKind.ModuleDeclaration:
            case ts.SyntaxKind.ExternalModuleReference:
            case ts.SyntaxKind.LastTypeNode:
            case ts.SyntaxKind.JsxAttribute:
            case ts.SyntaxKind.ExpressionStatement:
            case ts.SyntaxKind.LiteralType:
                return true;
            default:
                return false;
        }
    }
    identifyReplacements(str) {
        if (str.parent && this.isInvalidParent(str.parent)) {
            return [];
        }
        if (this.isEmpty(str)) {
            return [{ node: str, replacement: '"Stryker was here!"' }];
        }
        else {
            return [{ node: str, replacement: '""' }];
        }
    }
    isEmpty(str) {
        function isEmptyString() {
            return str.kind === ts.SyntaxKind.StringLiteral && str.text === '';
        }
        function isEmptyTemplate() {
            return str.kind === ts.SyntaxKind.FirstTemplateToken && str.text === '';
        }
        return isEmptyString() || isEmptyTemplate();
    }
}
exports.default = StringLiteralMutator;
//# sourceMappingURL=StringLiteralMutator.js.map